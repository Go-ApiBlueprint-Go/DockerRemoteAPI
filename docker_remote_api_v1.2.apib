FORMAT: 1A

# Docker Remote API v1.2

# Group Brief introduction

- The Remote API is replacing rcli
- Default port in the docker daemon is 2375
- The API tends to be REST, but for some complex commands, like attach
  or pull, the HTTP connection is hijacked to transport stdout stdin
  and stderr

# Group Endpoints

## Containers [/containers]

### List containers [GET /containers/json{?all,limit,since,before}]

List containers

Status Codes:

-   **200** - no error
-   **400** - bad parameter
-   **500** - server error


+ Request (application/json)

        GET /containers/json?all=1&before=8dfafdbc3a40 HTTP/1.1


+ Response 200 (application/json)

        [
             {
                     "Id": "8dfafdbc3a40",
                     "Image": "ubuntu:latest",
                     "Command": "echo 1",
                     "Created": 1367854155,
                     "Status": "Exit 0",
                     "Ports":"",
                     "SizeRw":12288,
                     "SizeRootFs":0
             },
             {
                     "Id": "9cd87474be90",
                     "Image": "ubuntu:latest",
                     "Command": "echo 222222",
                     "Created": 1367854155,
                     "Status": "Exit 0",
                     "Ports":"",
                     "SizeRw":12288,
                     "SizeRootFs":0
             },
             {
                     "Id": "3176a2479c92",
                     "Image": "centos:latest",
                     "Command": "echo 3333333333333333",
                     "Created": 1367854154,
                     "Status": "Exit 0",
                     "Ports":"",
                     "SizeRw":12288,
                     "SizeRootFs":0
             },
             {
                     "Id": "4cb07b47f9fb",
                     "Image": "fedora:latest",
                     "Command": "echo 444444444444444444444444444444444",
                     "Created": 1367854152,
                     "Status": "Exit 0",
                     "Ports":"",
                     "SizeRw":12288,
                     "SizeRootFs":0
             }
        ]

+ Parameters
    + all (string) - 1/True/true or 0/False/false, Show all containers. Only running containers are shown by default
    + limit (number) - Show `limit` last created containers, include non-running ones.
    + since (string) - Show only containers created since Id, include non-running ones.
    + before (string) - Show only containers created before Id, include non-running ones.


### Create a container [POST /containers/create]

Create a container

Status Codes:

-   **201** - no error
-   **404** - no such container
-   **406** - impossible to attach (container not running)
-   **500** - server error


+ Request (application/json)

    + Attributes (object)
        + Hostname: null (string)
        + User: null (string)
        + Memory: 0 (number)
        + MemorySwap: 0 (number)
        + AttachStdin: false (boolean)
        + AttachStdout: true (boolean)
        + AttachStderr: true (boolean)
        + PortSpecs: null (string)
        + Tty: false (boolean)
        + OpenStdin: false (boolean)
        + StdinOnce: false (boolean)
        + Env: null (string)
        + Cmd: [] (array[string])
        + Dns: null (string)
        + Image: ubuntu (string)
        + Volumes: {} (object)
        + VolumesFrom: null (string)

+ Response 201 (application/json)

        {
            "Id":"e90e34656806"
            "Warnings":[]
        }


### Inspect a container  [GET /containers/{id}/json]

Return low-level information on the container `id`

Status Codes:

-   **200** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        GET /containers/4fa6e0f0c678/json HTTP/1.1


+ Response 200 (application/json)

        {
            "Id": "4fa6e0f0c6786287e131c3852c58a2e01cc697a68231826813597e4994f1d6e2",
            "Created": "2013-05-07T14:51:42.041847+02:00",
            "Path": "date",
            "Args": [],
            "Config": {
                "Hostname": "4fa6e0f0c678",
                "User": "",
                "Memory": 0,
                "MemorySwap": 0,
                "AttachStdin": false,
                "AttachStdout": true,
                "AttachStderr": true,
                "PortSpecs": null,
                "Tty": false,
                "OpenStdin": false,
                "StdinOnce": false,
                "Env": null,
                "Cmd": [
                    "date"
                ],
                "Dns": null,
                "Image": "ubuntu",
                "Volumes": {},
                "VolumesFrom": ""
            },
            "State": {
                "Running": false,
                "Pid": 0,
                "ExitCode": 0,
                "StartedAt": "2013-05-07T14:51:42.087658+02:01360",
                "Ghost": false
            },
            "Image": "b750fe79269d2ec9a3c593ef05b4332b1d1a02a62b4accb2c21d589ff2f5f2dc",
            "NetworkSettings": {
                "IpAddress": "",
                "IpPrefixLen": 0,
                "Gateway": "",
                "Bridge": "",
                "PortMapping": null
            },
            "SysInitPath": "/home/kitty/go/src/github.com/docker/docker/bin/docker",
            "ResolvConfPath": "/etc/resolv.conf",
            "Volumes": {}
        }



### Inspect changes on a container's filesystem  [GET /containers/{id}/changes]

Inspect changes on container `id`'s filesystem

Status Codes:

-   **200** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        GET /containers/4fa6e0f0c678/changes HTTP/1.1


+ Response 200 (application/json)

        [
            {
                    "Path": "/dev",
                    "Kind": 0
            },
            {
                    "Path": "/dev/kmsg",
                    "Kind": 1
            },
            {
                    "Path": "/test",
                    "Kind": 1
            }
        ]



### Export a container [GET /containers/{id}/export]

Export the contents of container `id`

Status Codes:

-   **200** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        GET /containers/4fa6e0f0c678/export HTTP/1.1


+ Response 200 (application/json)

        {{ TAR STREAM }}



### Start a container  [POST /containers/{id}/start]

Start the container `id`

Status Codes:

-   **200** - no error
-   **404** - no such container
-   **500** - server error

+ Request (application/json)

        POST /containers/e90e34656806/start HTTP/1.1


+ Response 200 (application/json)



### Stop a container [POST /containers/{id}/stop]

Stop the container `id`

Status Codes:

-   **204** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        POST /containers/e90e34656806/stop?t=5 HTTP/1.1


+ Response 204 (application/json)


+ Parameters
  + t - number of seconds to wait before killing the container



### Restart a container [POST /containers/{id}/restart]

Restart the container `id`

Status Codes:

-   **204** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        POST /containers/e90e34656806/restart?t=5 HTTP/1.1


+ Response 204 (application/json)


+ Parameters

    + t - number of seconds to wait before killing the container


### Kill a container [POST /containers/{id}/kill]

Kill the container `id`

Status Codes:

-   **204** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        POST /containers/e90e34656806/kill HTTP/1.1


+ Response 204 (application/json)


### Attach to a container [POST /containers/{id}/attach{?logs,stream,stdin,stdout,stderr}]

Attach to the container `id`

Status Codes:

-   **200** - no error
-   **400** - bad parameter
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        POST /containers/16253994b7c4/attach?logs=1&stream=0&stdout=1 HTTP/1.1


+ Response 200 (application/json)


        {{ STREAM }}

+ Parameters
    +   logs - 1/True/true or 0/False/false, return logs. Defaul
            false
    +   stream - 1/True/true or 0/False/false, return stream.
            Default false
    +   stdin - 1/True/true or 0/False/false, if stream=true, attach
            to stdin. Default false
    +   stdout - 1/True/true or 0/False/false, if logs=true, return
            stdout log, if stream=true, attach to stdout. Default false
    +   stderr - 1/True/true or 0/False/false, if logs=true, return
            stderr log, if stream=true, attach to stderr. Default false



### Attach to a container using websocket [GET /containers/{id}/attach/ws{?logs,stream,stdin,stdout,stderr}]

Attach to the container `id` via websocket

Implements websocket protocol handshake according to [RFC 6455](http://tools.ietf.org/html/rfc6455)

Status Codes:

-   **200** - no error
-   **400** - bad parameter
-   **404** - no such container
-   **500** - server error


+ Response 200

        {{ STREAM }}

+ Parameters

    +   logs - 1/True/true or 0/False/false, return logs. Default false

    +   stream - 1/True/true or 0/False/false, return stream.
            Default false
    +   stdin - 1/True/true or 0/False/false, if stream=true, attach
            to stdin. Default false
    +   stdout - 1/True/true or 0/False/false, if logs=true, return
            stdout log, if stream=true, attach to stdout. Default false
    +   stderr - 1/True/true or 0/False/false, if logs=true, return
            stderr log, if stream=true, attach to stderr. Default false



### Wait a container [POST /containers/{id}/wait]

Block until container `id` stops, then returns the exit code

Status Codes:

-   **200** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        POST /containers/16253994b7c4/wait HTTP/1.1


+ Response 200 (application/json)

        {"StatusCode": 0}


### Remove a container [DELETE /containers/{id}{?v}]

Remove the container `id` from the filesystem

Status Codes:

-   **204** - no error
-   **400** - bad parameter
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        DELETE /containers/16253994b7c4?v=1 HTTP/1.1


+ Response 204 (application/json)


+ Parameters
    + v - 1/True/true or 0/False/false, Remove the volumes
            associated to the container. Default false


## Images [/images]

### List Images [GET /images/{format}{?all}]

List images `format` could be json or viz (json default)

Status Codes:

-   **200** - no error
-   **400** - bad parameter
-   **500** - server error


+ Request (application/json)

        GET /images/json?all=0 HTTP/1.1


+ Response 200 (application/json)

        [
             {
                     "Repository":"ubuntu",
                     "Tag":"precise",
                     "Id":"b750fe79269d",
                     "Created":1364102658,
                     "Size":24653,
                     "VirtualSize":180116135
             },
             {
                     "Repository":"ubuntu",
                     "Tag":"12.04",
                     "Id":"b750fe79269d",
                     "Created":1364102658,
                     "Size":24653,
                     "VirtualSize":180116135
             }
        ]

+ Request (application/json)

        GET /images/viz HTTP/1.1


+ Response 200 (text/plain)

        digraph docker {
        "d82cbacda43a" -> "074be284591f"
        "1496068ca813" -> "08306dc45919"
        "08306dc45919" -> "0e7893146ac2"
        "b750fe79269d" -> "1496068ca813"
        base -> "27cf78414709" [style=invis]
        "f71189fff3de" -> "9a33b36209ed"
        "27cf78414709" -> "b750fe79269d"
        "0e7893146ac2" -> "d6434d954665"
        "d6434d954665" -> "d82cbacda43a"
        base -> "e9aa60c60128" [style=invis]
        "074be284591f" -> "f71189fff3de"
        "b750fe79269d" [label="b750fe79269d\nubuntu",shape=box,fillcolor="paleturquoise",style="filled,rounded"];
        "e9aa60c60128" [label="e9aa60c60128\ncentos",shape=box,fillcolor="paleturquoise",style="filled,rounded"];
        "9a33b36209ed" [label="9a33b36209ed\nfedora",shape=box,fillcolor="paleturquoise",style="filled,rounded"];
        base [style=invisible]
        }

+ Parameters
    + format - List images `format` could be json or viz (json default)
    + all - 1/True/true or 0/False/false, Show all containers.
            Only running containers are shown by defaul


### Create an image [POST /images/create{?fromImage,fromSrc,repo,tag,registry}]

Create an image, either by pull it from the registry or by importing it

Status Codes:

-   **200** - no error
-   **500** - server error


+ Request (application/json)

        POST /images/create?fromImage=ubuntu HTTP/1.1


+ Response 200 (application/json)

        {"status":"Pulling..."}
        {"status":"Pulling", "progress":"1/? (n/a)"}
        {"error":"Invalid..."}
        ...

+ Parameters
    + fromImage - name of the image to pull
    + fromSrc - source to import, - means stdin
    + repo - repository
    + tag - tag
    + registry - the registry to pull from



### Insert a file in an image [POST /images/{name}/insert{?path,url}]

Insert a file from `url` in the image `name` at `path`

Status Codes:

-   **200** - no error
-   **500** - server error


+ Request (application/json)

        POST /images/test/insert?path=/usr&url=myurl HTTP/1.1


+ Response 200 (application/json)

        {"status":"Inserting..."}
        {"status":"Inserting", "progress":"1/? (n/a)"}
        {"error":"Invalid..."}
        ...

+ Parameters

    +   url - The url from where the file is taken
    +   path - The path where the file is stored


### Inspect an image [GET /images/{name}/json]

Return low-level information on the image `name`


Status Codes:

-   **200** - no error
-   **404** - no such image
-   **500** - server error


+ Request (application/json)

        GET /images/centos/json HTTP/1.1


+ Response 200 (application/json)

        {
             "id":"b750fe79269d2ec9a3c593ef05b4332b1d1a02a62b4accb2c21d589ff2f5f2dc",
             "parent":"27cf784147099545",
             "created":"2013-03-23T22:24:18.818426-07:00",
             "container":"3d67245a8d72ecf13f33dffac9f79dcdf70f75acb84d308770391510e0c23ad0",
             "container_config": {
                 "Hostname":"",
                 "User":"",
                 "Memory":0,
                 "MemorySwap":0,
                 "AttachStdin":false,
                 "AttachStdout":false,
                 "AttachStderr":false,
                 "PortSpecs":null,
                 "Tty":true,
                 "OpenStdin":true,
                 "StdinOnce":false,
                 "Env":null,
                 "Cmd": ["/bin/bash"],
                 "Dns":null,
                 "Image":"centos",
                 "Volumes":null,
                 "VolumesFrom":""
             },
             "Size": 6824592
        }


### Get the history of an image [GET /images/{name}/history]

Return the history of the image `name`

Status Codes:

-   **200** - no error
-   **404** - no such image
-   **500** - server error


+ Request (application/json)

        GET /images/fedora/history HTTP/1.1


+ Response 200 (application/json)

        [
            {
                "Id":"b750fe79269d",
                "Tag":["ubuntu:latest"],
                "Created":1364102658,
                "CreatedBy":"/bin/bash"
            },
            {
                "Id":"27cf78414709",
                "Created":1364068391,
                "CreatedBy":""
            }
        ]


### Push an image on the registry [POST /images/{name}/push]

Push the image `name` on the registry

Status Codes:

-   **200** - no error
-   **404** - no such image
-   **500** - server error

+ Request (application/json)

        {{ authConfig }}


+ Response 200 (application/json)

        {"status":"Pushing..."}
        {"status":"Pushing", "progress":"1/? (n/a)"}
        {"error":"Invalid..."}
        ...


### Tag an image into a repository [POST /images/{name}/tag{?repo,force,tag}]

Tag the image `name` into a repository

Status Codes:

-   **201** - no error
-   **400** - bad parameter
-   **404** - no such image
-   **409** - conflict
-   **500** - server error


+ Request (application/json)

        POST /images/test/tag?repo=myrepo&force=0&tag=v42 HTTP/1.1


+ Response 201 (application/json)


+ Parameters

    +   repo - The repository to tag in
    +   force - 1/True/true or 0/False/false, default false
    +   tag - The new tag name



### Remove an image [DELETE /images/{name}]

Remove the image `name` from the filesystem

Status Codes:

-   **204** - no error
-   **404** - no such image
-   **409** - conflict
-   **500** - server error


+ Request (application/json)

        DELETE /images/test HTTP/1.1

+ Response 200 (application/json)

        [
         {"Untagged": "3e2f21a89f"},
         {"Deleted": "3e2f21a89f"},
         {"Deleted": "53b4f83ac9"}
        ]


### Search images [GET /images/search]

Search for an image on [Docker Hub](https://hub.docker.com)

+ Request (application/json)

        GET /images/search?term=sshd HTTP/1.1


+ Response 200 (application/json)

        [
             {
                     "Name":"cespare/sshd",
                     "Description":""
             },
             {
                     "Name":"johnfuller/sshd",
                     "Description":""
             },
             {
                     "Name":"dhrp/mongodb-sshd",
                     "Description":""
             }
        ]

        :query term: term to search
        :statuscode 200: no error
        :statuscode 500: server error


## 2.3 Misc [/]


### Build an image from Dockerfile via stdin [POST /build{?t,remote}]

Build an image from Dockerfile

Status Codes:

-   **200** - no error
-   **500** - server error

{{ STREAM }} is the raw text output of the build command. It uses the
HTTP Hijack method in order to stream.

+ Request (application/json)

        {{ TAR STREAM }}


+ Response 200 (text/plain)

        {{ STREAM }}


+ Parameters
    + t - repository name to be applied to the resulting image in
            case of success
    + remote - resource to fetch, as URI


### Check auth configuration [POST /auth]

Get the default username and email

Status Codes:

-   **200** - no error
-   **204** - no error
-   **401** - unauthorized
-   **403** - forbidden
-   **500** - server error


+ Request (application/json)

        {
             "username":"hannibal",
             "password:"xxxx",
             "email":"hannibal@a-team.com"
        }


+ Response 200 (application/json)

        {
             "Status": "Login Succeeded"
        }


### Display system-wide information [GET /info]

Display system-wide information

Status Codes:

-   **200** - no error
-   **500** - server error

+ Request (application/json)

        GET /info HTTP/1.1


+ Response 200 (application/json)

        {
             "Containers":11,
             "Images":16,
             "Debug":false,
             "NFd": 11,
             "NGoroutines":21,
             "MemoryLimit":true,
             "SwapLimit":false
        }


### Show the docker version information [GET /version]

Show the docker version information

Status Codes:

-   **200** - no error
-   **500** - server error

+ Request (application/json)


+ Response 200 (application/json)

        {
             "Version":"0.2.2",
             "GitCommit":"5a2a5cc+CHANGES",
             "GoVersion":"go1.0.3"
        }


### Create a new image from a container's changes [POST /commit{?container,repo,tag,m,author}]

Create a new image from a container's changes

Status Codes:

-   **201** - no error
-   **404** - no such container
-   **500** - server error


+ Request (application/json)

        {
            "Cmd": ["cat", "/world"],
            "PortSpecs":["22"]
        }


+ Response 201 (application/vnd.docker.raw-stream)

        {"Id": "596069db4bf5"}


+ Parameters
    + container - source container
    + repo - repository
    + tag - tag
    + m - commit message
    + author - author (e.g., "John Hannibal Smith
        <[hannibal@a-team.com](mailto:hannibal%40a-team.com)>")


# Group Going further

## Inside `docker run`

Here are the steps of `docker run` :

 - Create the container

 - If the status code is 404, it means the image doesn't exist:
        - Try to pull it
        - Then retry to create the container

 - Start the container

 - If you are not in detached mode:
        - Attach to the container, using logs=1 (to have stdout and
            stderr from the container's start) and stream=1

 - If in detached mode or only stdin is attached:
        - Display the container's

## Hijacking

In this version of the API, /attach, uses hijacking to transport stdin,
stdout and stderr on the same socket. This might change in the future.


## CORS Requests

To enable cross origin requests to the remote api add the flag
"--api-enable-cors" when running docker in daemon mode.

> docker -d -H="[tcp://192.168.1.9:2375](tcp://192.168.1.9:2375)"
> -api-enable-cors
